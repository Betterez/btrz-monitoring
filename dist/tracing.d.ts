import { NodeSDK } from "@opentelemetry/sdk-node";
import * as semanticConventions from "@opentelemetry/semantic-conventions";
import { InMemorySpanExporter, SimpleSpanProcessor } from "@opentelemetry/sdk-trace-base";
import { SpanOptions } from "@opentelemetry/api";
import { BtrzLogger, SimpleDao } from "./types/external.types";
interface TracingInitOptions {
    enabled?: boolean;
    serviceName: string;
    samplePercentage?: number;
    traceDestinationUrl: string;
    ignoreStaticAssetDir?: string | string[];
    ignoredHttpMethods?: HttpMethod[];
    ignoredRoutes?: HttpRoute[];
    ignoredAwsSqsEvents?: AwsSqsEvent[];
    enableFilesystemTracing?: boolean;
}
type HttpMethod = "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "HEAD" | "CONNECT" | "TRACE";
type HttpRoute = {
    method: HttpMethod;
    url: string | RegExp;
};
type AwsSqsEvent = "ReceiveMessage" | "ProcessMessage";
export declare const monitoringAttributes: {
    readonly SEMATTRS_AWS_LAMBDA_INVOKED_ARN: "aws.lambda.invoked_arn";
    readonly SEMATTRS_DB_SYSTEM: "db.system";
    readonly SEMATTRS_DB_CONNECTION_STRING: "db.connection_string";
    readonly SEMATTRS_DB_USER: "db.user";
    readonly SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: "db.jdbc.driver_classname";
    readonly SEMATTRS_DB_NAME: "db.name";
    readonly SEMATTRS_DB_STATEMENT: "db.statement";
    readonly SEMATTRS_DB_OPERATION: "db.operation";
    readonly SEMATTRS_DB_MSSQL_INSTANCE_NAME: "db.mssql.instance_name";
    readonly SEMATTRS_DB_CASSANDRA_KEYSPACE: "db.cassandra.keyspace";
    readonly SEMATTRS_DB_CASSANDRA_PAGE_SIZE: "db.cassandra.page_size";
    readonly SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: "db.cassandra.consistency_level";
    readonly SEMATTRS_DB_CASSANDRA_TABLE: "db.cassandra.table";
    readonly SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: "db.cassandra.idempotence";
    readonly SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: "db.cassandra.speculative_execution_count";
    readonly SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: "db.cassandra.coordinator.id";
    readonly SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: "db.cassandra.coordinator.dc";
    readonly SEMATTRS_DB_HBASE_NAMESPACE: "db.hbase.namespace";
    readonly SEMATTRS_DB_REDIS_DATABASE_INDEX: "db.redis.database_index";
    readonly SEMATTRS_DB_MONGODB_COLLECTION: "db.mongodb.collection";
    readonly SEMATTRS_DB_SQL_TABLE: "db.sql.table";
    readonly SEMATTRS_EXCEPTION_TYPE: "exception.type";
    readonly SEMATTRS_EXCEPTION_MESSAGE: "exception.message";
    readonly SEMATTRS_EXCEPTION_STACKTRACE: "exception.stacktrace";
    readonly SEMATTRS_EXCEPTION_ESCAPED: "exception.escaped";
    readonly SEMATTRS_FAAS_TRIGGER: "faas.trigger";
    readonly SEMATTRS_FAAS_EXECUTION: "faas.execution";
    readonly SEMATTRS_FAAS_DOCUMENT_COLLECTION: "faas.document.collection";
    readonly SEMATTRS_FAAS_DOCUMENT_OPERATION: "faas.document.operation";
    readonly SEMATTRS_FAAS_DOCUMENT_TIME: "faas.document.time";
    readonly SEMATTRS_FAAS_DOCUMENT_NAME: "faas.document.name";
    readonly SEMATTRS_FAAS_TIME: "faas.time";
    readonly SEMATTRS_FAAS_CRON: "faas.cron";
    readonly SEMATTRS_FAAS_COLDSTART: "faas.coldstart";
    readonly SEMATTRS_FAAS_INVOKED_NAME: "faas.invoked_name";
    readonly SEMATTRS_FAAS_INVOKED_PROVIDER: "faas.invoked_provider";
    readonly SEMATTRS_FAAS_INVOKED_REGION: "faas.invoked_region";
    readonly SEMATTRS_NET_TRANSPORT: "net.transport";
    readonly SEMATTRS_NET_PEER_IP: "net.peer.ip";
    readonly SEMATTRS_NET_PEER_PORT: "net.peer.port";
    readonly SEMATTRS_NET_PEER_NAME: "net.peer.name";
    readonly SEMATTRS_NET_HOST_IP: "net.host.ip";
    readonly SEMATTRS_NET_HOST_PORT: "net.host.port";
    readonly SEMATTRS_NET_HOST_NAME: "net.host.name";
    readonly SEMATTRS_NET_HOST_CONNECTION_TYPE: "net.host.connection.type";
    readonly SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: "net.host.connection.subtype";
    readonly SEMATTRS_NET_HOST_CARRIER_NAME: "net.host.carrier.name";
    readonly SEMATTRS_NET_HOST_CARRIER_MCC: "net.host.carrier.mcc";
    readonly SEMATTRS_NET_HOST_CARRIER_MNC: "net.host.carrier.mnc";
    readonly SEMATTRS_NET_HOST_CARRIER_ICC: "net.host.carrier.icc";
    readonly SEMATTRS_PEER_SERVICE: "peer.service";
    readonly SEMATTRS_ENDUSER_ID: "enduser.id";
    readonly SEMATTRS_ENDUSER_ROLE: "enduser.role";
    readonly SEMATTRS_ENDUSER_SCOPE: "enduser.scope";
    readonly SEMATTRS_THREAD_ID: "thread.id";
    readonly SEMATTRS_THREAD_NAME: "thread.name";
    readonly SEMATTRS_CODE_FUNCTION: "code.function";
    readonly SEMATTRS_CODE_NAMESPACE: "code.namespace";
    readonly SEMATTRS_CODE_FILEPATH: "code.filepath";
    readonly SEMATTRS_CODE_LINENO: "code.lineno";
    readonly SEMATTRS_HTTP_METHOD: "http.method";
    readonly SEMATTRS_HTTP_URL: "http.url";
    readonly SEMATTRS_HTTP_TARGET: "http.target";
    readonly SEMATTRS_HTTP_HOST: "http.host";
    readonly SEMATTRS_HTTP_SCHEME: "http.scheme";
    readonly SEMATTRS_HTTP_STATUS_CODE: "http.status_code";
    readonly SEMATTRS_HTTP_FLAVOR: "http.flavor";
    readonly SEMATTRS_HTTP_USER_AGENT: "http.user_agent";
    readonly SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: "http.request_content_length";
    readonly SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: "http.request_content_length_uncompressed";
    readonly SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: "http.response_content_length";
    readonly SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: "http.response_content_length_uncompressed";
    readonly SEMATTRS_HTTP_SERVER_NAME: "http.server_name";
    readonly SEMATTRS_HTTP_ROUTE: "http.route";
    readonly SEMATTRS_HTTP_CLIENT_IP: "http.client_ip";
    readonly SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: "aws.dynamodb.table_names";
    readonly SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: "aws.dynamodb.consumed_capacity";
    readonly SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: "aws.dynamodb.item_collection_metrics";
    readonly SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: "aws.dynamodb.provisioned_read_capacity";
    readonly SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: "aws.dynamodb.provisioned_write_capacity";
    readonly SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: "aws.dynamodb.consistent_read";
    readonly SEMATTRS_AWS_DYNAMODB_PROJECTION: "aws.dynamodb.projection";
    readonly SEMATTRS_AWS_DYNAMODB_LIMIT: "aws.dynamodb.limit";
    readonly SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: "aws.dynamodb.attributes_to_get";
    readonly SEMATTRS_AWS_DYNAMODB_INDEX_NAME: "aws.dynamodb.index_name";
    readonly SEMATTRS_AWS_DYNAMODB_SELECT: "aws.dynamodb.select";
    readonly SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: "aws.dynamodb.global_secondary_indexes";
    readonly SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: "aws.dynamodb.local_secondary_indexes";
    readonly SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: "aws.dynamodb.exclusive_start_table";
    readonly SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: "aws.dynamodb.table_count";
    readonly SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: "aws.dynamodb.scan_forward";
    readonly SEMATTRS_AWS_DYNAMODB_SEGMENT: "aws.dynamodb.segment";
    readonly SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: "aws.dynamodb.total_segments";
    readonly SEMATTRS_AWS_DYNAMODB_COUNT: "aws.dynamodb.count";
    readonly SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: "aws.dynamodb.scanned_count";
    readonly SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: "aws.dynamodb.attribute_definitions";
    readonly SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: "aws.dynamodb.global_secondary_index_updates";
    readonly SEMATTRS_MESSAGING_SYSTEM: "messaging.system";
    readonly SEMATTRS_MESSAGING_DESTINATION: "messaging.destination";
    readonly SEMATTRS_MESSAGING_DESTINATION_KIND: "messaging.destination_kind";
    readonly SEMATTRS_MESSAGING_TEMP_DESTINATION: "messaging.temp_destination";
    readonly SEMATTRS_MESSAGING_PROTOCOL: "messaging.protocol";
    readonly SEMATTRS_MESSAGING_PROTOCOL_VERSION: "messaging.protocol_version";
    readonly SEMATTRS_MESSAGING_URL: "messaging.url";
    readonly SEMATTRS_MESSAGING_MESSAGE_ID: "messaging.message_id";
    readonly SEMATTRS_MESSAGING_CONVERSATION_ID: "messaging.conversation_id";
    readonly SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: "messaging.message_payload_size_bytes";
    readonly SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: "messaging.message_payload_compressed_size_bytes";
    readonly SEMATTRS_MESSAGING_OPERATION: "messaging.operation";
    readonly SEMATTRS_MESSAGING_CONSUMER_ID: "messaging.consumer_id";
    readonly SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: "messaging.rabbitmq.routing_key";
    readonly SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: "messaging.kafka.message_key";
    readonly SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: "messaging.kafka.consumer_group";
    readonly SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: "messaging.kafka.client_id";
    readonly SEMATTRS_MESSAGING_KAFKA_PARTITION: "messaging.kafka.partition";
    readonly SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: "messaging.kafka.tombstone";
    readonly SEMATTRS_RPC_SYSTEM: "rpc.system";
    readonly SEMATTRS_RPC_SERVICE: "rpc.service";
    readonly SEMATTRS_RPC_METHOD: "rpc.method";
    readonly SEMATTRS_RPC_GRPC_STATUS_CODE: "rpc.grpc.status_code";
    readonly SEMATTRS_RPC_JSONRPC_VERSION: "rpc.jsonrpc.version";
    readonly SEMATTRS_RPC_JSONRPC_REQUEST_ID: "rpc.jsonrpc.request_id";
    readonly SEMATTRS_RPC_JSONRPC_ERROR_CODE: "rpc.jsonrpc.error_code";
    readonly SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: "rpc.jsonrpc.error_message";
    readonly SEMATTRS_MESSAGE_TYPE: "message.type";
    readonly SEMATTRS_MESSAGE_ID: "message.id";
    readonly SEMATTRS_MESSAGE_COMPRESSED_SIZE: "message.compressed_size";
    readonly SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: "message.uncompressed_size";
    readonly SemanticAttributes: semanticConventions.SemanticAttributes;
    readonly DBSYSTEMVALUES_OTHER_SQL: "other_sql";
    readonly DBSYSTEMVALUES_MSSQL: "mssql";
    readonly DBSYSTEMVALUES_MYSQL: "mysql";
    readonly DBSYSTEMVALUES_ORACLE: "oracle";
    readonly DBSYSTEMVALUES_DB2: "db2";
    readonly DBSYSTEMVALUES_POSTGRESQL: "postgresql";
    readonly DBSYSTEMVALUES_REDSHIFT: "redshift";
    readonly DBSYSTEMVALUES_HIVE: "hive";
    readonly DBSYSTEMVALUES_CLOUDSCAPE: "cloudscape";
    readonly DBSYSTEMVALUES_HSQLDB: "hsqldb";
    readonly DBSYSTEMVALUES_PROGRESS: "progress";
    readonly DBSYSTEMVALUES_MAXDB: "maxdb";
    readonly DBSYSTEMVALUES_HANADB: "hanadb";
    readonly DBSYSTEMVALUES_INGRES: "ingres";
    readonly DBSYSTEMVALUES_FIRSTSQL: "firstsql";
    readonly DBSYSTEMVALUES_EDB: "edb";
    readonly DBSYSTEMVALUES_CACHE: "cache";
    readonly DBSYSTEMVALUES_ADABAS: "adabas";
    readonly DBSYSTEMVALUES_FIREBIRD: "firebird";
    readonly DBSYSTEMVALUES_DERBY: "derby";
    readonly DBSYSTEMVALUES_FILEMAKER: "filemaker";
    readonly DBSYSTEMVALUES_INFORMIX: "informix";
    readonly DBSYSTEMVALUES_INSTANTDB: "instantdb";
    readonly DBSYSTEMVALUES_INTERBASE: "interbase";
    readonly DBSYSTEMVALUES_MARIADB: "mariadb";
    readonly DBSYSTEMVALUES_NETEZZA: "netezza";
    readonly DBSYSTEMVALUES_PERVASIVE: "pervasive";
    readonly DBSYSTEMVALUES_POINTBASE: "pointbase";
    readonly DBSYSTEMVALUES_SQLITE: "sqlite";
    readonly DBSYSTEMVALUES_SYBASE: "sybase";
    readonly DBSYSTEMVALUES_TERADATA: "teradata";
    readonly DBSYSTEMVALUES_VERTICA: "vertica";
    readonly DBSYSTEMVALUES_H2: "h2";
    readonly DBSYSTEMVALUES_COLDFUSION: "coldfusion";
    readonly DBSYSTEMVALUES_CASSANDRA: "cassandra";
    readonly DBSYSTEMVALUES_HBASE: "hbase";
    readonly DBSYSTEMVALUES_MONGODB: "mongodb";
    readonly DBSYSTEMVALUES_REDIS: "redis";
    readonly DBSYSTEMVALUES_COUCHBASE: "couchbase";
    readonly DBSYSTEMVALUES_COUCHDB: "couchdb";
    readonly DBSYSTEMVALUES_COSMOSDB: "cosmosdb";
    readonly DBSYSTEMVALUES_DYNAMODB: "dynamodb";
    readonly DBSYSTEMVALUES_NEO4J: "neo4j";
    readonly DBSYSTEMVALUES_GEODE: "geode";
    readonly DBSYSTEMVALUES_ELASTICSEARCH: "elasticsearch";
    readonly DBSYSTEMVALUES_MEMCACHED: "memcached";
    readonly DBSYSTEMVALUES_COCKROACHDB: "cockroachdb";
    readonly DbSystemValues: semanticConventions.DbSystemValues;
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_ALL: "all";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: "each_quorum";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: "quorum";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: "local_quorum";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_ONE: "one";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_TWO: "two";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_THREE: "three";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: "local_one";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_ANY: "any";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: "serial";
    readonly DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: "local_serial";
    readonly DbCassandraConsistencyLevelValues: semanticConventions.DbCassandraConsistencyLevelValues;
    readonly FAASTRIGGERVALUES_DATASOURCE: "datasource";
    readonly FAASTRIGGERVALUES_HTTP: "http";
    readonly FAASTRIGGERVALUES_PUBSUB: "pubsub";
    readonly FAASTRIGGERVALUES_TIMER: "timer";
    readonly FAASTRIGGERVALUES_OTHER: "other";
    readonly FaasTriggerValues: semanticConventions.FaasTriggerValues;
    readonly FAASDOCUMENTOPERATIONVALUES_INSERT: "insert";
    readonly FAASDOCUMENTOPERATIONVALUES_EDIT: "edit";
    readonly FAASDOCUMENTOPERATIONVALUES_DELETE: "delete";
    readonly FaasDocumentOperationValues: semanticConventions.FaasDocumentOperationValues;
    readonly FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: "alibaba_cloud";
    readonly FAASINVOKEDPROVIDERVALUES_AWS: "aws";
    readonly FAASINVOKEDPROVIDERVALUES_AZURE: "azure";
    readonly FAASINVOKEDPROVIDERVALUES_GCP: "gcp";
    readonly FaasInvokedProviderValues: semanticConventions.FaasInvokedProviderValues;
    readonly NETTRANSPORTVALUES_IP_TCP: "ip_tcp";
    readonly NETTRANSPORTVALUES_IP_UDP: "ip_udp";
    readonly NETTRANSPORTVALUES_IP: "ip";
    readonly NETTRANSPORTVALUES_UNIX: "unix";
    readonly NETTRANSPORTVALUES_PIPE: "pipe";
    readonly NETTRANSPORTVALUES_INPROC: "inproc";
    readonly NETTRANSPORTVALUES_OTHER: "other";
    readonly NetTransportValues: semanticConventions.NetTransportValues;
    readonly NETHOSTCONNECTIONTYPEVALUES_WIFI: "wifi";
    readonly NETHOSTCONNECTIONTYPEVALUES_WIRED: "wired";
    readonly NETHOSTCONNECTIONTYPEVALUES_CELL: "cell";
    readonly NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: "unavailable";
    readonly NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: "unknown";
    readonly NetHostConnectionTypeValues: semanticConventions.NetHostConnectionTypeValues;
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: "gprs";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: "edge";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: "umts";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: "cdma";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: "evdo_0";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: "evdo_a";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: "cdma2000_1xrtt";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: "hsdpa";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: "hsupa";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: "hspa";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: "iden";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: "evdo_b";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_LTE: "lte";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: "ehrpd";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: "hspap";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_GSM: "gsm";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: "td_scdma";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: "iwlan";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_NR: "nr";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: "nrnsa";
    readonly NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: "lte_ca";
    readonly NetHostConnectionSubtypeValues: semanticConventions.NetHostConnectionSubtypeValues;
    readonly HTTPFLAVORVALUES_HTTP_1_0: "1.0";
    readonly HTTPFLAVORVALUES_HTTP_1_1: "1.1";
    readonly HTTPFLAVORVALUES_HTTP_2_0: "2.0";
    readonly HTTPFLAVORVALUES_SPDY: "SPDY";
    readonly HTTPFLAVORVALUES_QUIC: "QUIC";
    readonly HttpFlavorValues: semanticConventions.HttpFlavorValues;
    readonly MESSAGINGDESTINATIONKINDVALUES_QUEUE: "queue";
    readonly MESSAGINGDESTINATIONKINDVALUES_TOPIC: "topic";
    readonly MessagingDestinationKindValues: semanticConventions.MessagingDestinationKindValues;
    readonly MESSAGINGOPERATIONVALUES_RECEIVE: "receive";
    readonly MESSAGINGOPERATIONVALUES_PROCESS: "process";
    readonly MessagingOperationValues: semanticConventions.MessagingOperationValues;
    readonly RPCGRPCSTATUSCODEVALUES_OK: 0;
    readonly RPCGRPCSTATUSCODEVALUES_CANCELLED: 1;
    readonly RPCGRPCSTATUSCODEVALUES_UNKNOWN: 2;
    readonly RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: 3;
    readonly RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: 4;
    readonly RPCGRPCSTATUSCODEVALUES_NOT_FOUND: 5;
    readonly RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: 6;
    readonly RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: 7;
    readonly RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: 8;
    readonly RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: 9;
    readonly RPCGRPCSTATUSCODEVALUES_ABORTED: 10;
    readonly RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: 11;
    readonly RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: 12;
    readonly RPCGRPCSTATUSCODEVALUES_INTERNAL: 13;
    readonly RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: 14;
    readonly RPCGRPCSTATUSCODEVALUES_DATA_LOSS: 15;
    readonly RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: 16;
    readonly RpcGrpcStatusCodeValues: semanticConventions.RpcGrpcStatusCodeValues;
    readonly MESSAGETYPEVALUES_SENT: "SENT";
    readonly MESSAGETYPEVALUES_RECEIVED: "RECEIVED";
    readonly MessageTypeValues: semanticConventions.MessageTypeValues;
    readonly SEMRESATTRS_CLOUD_PROVIDER: "cloud.provider";
    readonly SEMRESATTRS_CLOUD_ACCOUNT_ID: "cloud.account.id";
    readonly SEMRESATTRS_CLOUD_REGION: "cloud.region";
    readonly SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: "cloud.availability_zone";
    readonly SEMRESATTRS_CLOUD_PLATFORM: "cloud.platform";
    readonly SEMRESATTRS_AWS_ECS_CONTAINER_ARN: "aws.ecs.container.arn";
    readonly SEMRESATTRS_AWS_ECS_CLUSTER_ARN: "aws.ecs.cluster.arn";
    readonly SEMRESATTRS_AWS_ECS_LAUNCHTYPE: "aws.ecs.launchtype";
    readonly SEMRESATTRS_AWS_ECS_TASK_ARN: "aws.ecs.task.arn";
    readonly SEMRESATTRS_AWS_ECS_TASK_FAMILY: "aws.ecs.task.family";
    readonly SEMRESATTRS_AWS_ECS_TASK_REVISION: "aws.ecs.task.revision";
    readonly SEMRESATTRS_AWS_EKS_CLUSTER_ARN: "aws.eks.cluster.arn";
    readonly SEMRESATTRS_AWS_LOG_GROUP_NAMES: "aws.log.group.names";
    readonly SEMRESATTRS_AWS_LOG_GROUP_ARNS: "aws.log.group.arns";
    readonly SEMRESATTRS_AWS_LOG_STREAM_NAMES: "aws.log.stream.names";
    readonly SEMRESATTRS_AWS_LOG_STREAM_ARNS: "aws.log.stream.arns";
    readonly SEMRESATTRS_CONTAINER_NAME: "container.name";
    readonly SEMRESATTRS_CONTAINER_ID: "container.id";
    readonly SEMRESATTRS_CONTAINER_RUNTIME: "container.runtime";
    readonly SEMRESATTRS_CONTAINER_IMAGE_NAME: "container.image.name";
    readonly SEMRESATTRS_CONTAINER_IMAGE_TAG: "container.image.tag";
    readonly SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: "deployment.environment";
    readonly SEMRESATTRS_DEVICE_ID: "device.id";
    readonly SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: "device.model.identifier";
    readonly SEMRESATTRS_DEVICE_MODEL_NAME: "device.model.name";
    readonly SEMRESATTRS_FAAS_NAME: "faas.name";
    readonly SEMRESATTRS_FAAS_ID: "faas.id";
    readonly SEMRESATTRS_FAAS_VERSION: "faas.version";
    readonly SEMRESATTRS_FAAS_INSTANCE: "faas.instance";
    readonly SEMRESATTRS_FAAS_MAX_MEMORY: "faas.max_memory";
    readonly SEMRESATTRS_HOST_ID: "host.id";
    readonly SEMRESATTRS_HOST_NAME: "host.name";
    readonly SEMRESATTRS_HOST_TYPE: "host.type";
    readonly SEMRESATTRS_HOST_ARCH: "host.arch";
    readonly SEMRESATTRS_HOST_IMAGE_NAME: "host.image.name";
    readonly SEMRESATTRS_HOST_IMAGE_ID: "host.image.id";
    readonly SEMRESATTRS_HOST_IMAGE_VERSION: "host.image.version";
    readonly SEMRESATTRS_K8S_CLUSTER_NAME: "k8s.cluster.name";
    readonly SEMRESATTRS_K8S_NODE_NAME: "k8s.node.name";
    readonly SEMRESATTRS_K8S_NODE_UID: "k8s.node.uid";
    readonly SEMRESATTRS_K8S_NAMESPACE_NAME: "k8s.namespace.name";
    readonly SEMRESATTRS_K8S_POD_UID: "k8s.pod.uid";
    readonly SEMRESATTRS_K8S_POD_NAME: "k8s.pod.name";
    readonly SEMRESATTRS_K8S_CONTAINER_NAME: "k8s.container.name";
    readonly SEMRESATTRS_K8S_REPLICASET_UID: "k8s.replicaset.uid";
    readonly SEMRESATTRS_K8S_REPLICASET_NAME: "k8s.replicaset.name";
    readonly SEMRESATTRS_K8S_DEPLOYMENT_UID: "k8s.deployment.uid";
    readonly SEMRESATTRS_K8S_DEPLOYMENT_NAME: "k8s.deployment.name";
    readonly SEMRESATTRS_K8S_STATEFULSET_UID: "k8s.statefulset.uid";
    readonly SEMRESATTRS_K8S_STATEFULSET_NAME: "k8s.statefulset.name";
    readonly SEMRESATTRS_K8S_DAEMONSET_UID: "k8s.daemonset.uid";
    readonly SEMRESATTRS_K8S_DAEMONSET_NAME: "k8s.daemonset.name";
    readonly SEMRESATTRS_K8S_JOB_UID: "k8s.job.uid";
    readonly SEMRESATTRS_K8S_JOB_NAME: "k8s.job.name";
    readonly SEMRESATTRS_K8S_CRONJOB_UID: "k8s.cronjob.uid";
    readonly SEMRESATTRS_K8S_CRONJOB_NAME: "k8s.cronjob.name";
    readonly SEMRESATTRS_OS_TYPE: "os.type";
    readonly SEMRESATTRS_OS_DESCRIPTION: "os.description";
    readonly SEMRESATTRS_OS_NAME: "os.name";
    readonly SEMRESATTRS_OS_VERSION: "os.version";
    readonly SEMRESATTRS_PROCESS_PID: "process.pid";
    readonly SEMRESATTRS_PROCESS_EXECUTABLE_NAME: "process.executable.name";
    readonly SEMRESATTRS_PROCESS_EXECUTABLE_PATH: "process.executable.path";
    readonly SEMRESATTRS_PROCESS_COMMAND: "process.command";
    readonly SEMRESATTRS_PROCESS_COMMAND_LINE: "process.command_line";
    readonly SEMRESATTRS_PROCESS_COMMAND_ARGS: "process.command_args";
    readonly SEMRESATTRS_PROCESS_OWNER: "process.owner";
    readonly SEMRESATTRS_PROCESS_RUNTIME_NAME: "process.runtime.name";
    readonly SEMRESATTRS_PROCESS_RUNTIME_VERSION: "process.runtime.version";
    readonly SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: "process.runtime.description";
    readonly SEMRESATTRS_SERVICE_NAME: "service.name";
    readonly SEMRESATTRS_SERVICE_NAMESPACE: "service.namespace";
    readonly SEMRESATTRS_SERVICE_INSTANCE_ID: "service.instance.id";
    readonly SEMRESATTRS_SERVICE_VERSION: "service.version";
    readonly SEMRESATTRS_TELEMETRY_SDK_NAME: "telemetry.sdk.name";
    readonly SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: "telemetry.sdk.language";
    readonly SEMRESATTRS_TELEMETRY_SDK_VERSION: "telemetry.sdk.version";
    readonly SEMRESATTRS_TELEMETRY_AUTO_VERSION: "telemetry.auto.version";
    readonly SEMRESATTRS_WEBENGINE_NAME: "webengine.name";
    readonly SEMRESATTRS_WEBENGINE_VERSION: "webengine.version";
    readonly SEMRESATTRS_WEBENGINE_DESCRIPTION: "webengine.description";
    readonly SemanticResourceAttributes: semanticConventions.SemanticResourceAttributes;
    readonly CLOUDPROVIDERVALUES_ALIBABA_CLOUD: "alibaba_cloud";
    readonly CLOUDPROVIDERVALUES_AWS: "aws";
    readonly CLOUDPROVIDERVALUES_AZURE: "azure";
    readonly CLOUDPROVIDERVALUES_GCP: "gcp";
    readonly CloudProviderValues: semanticConventions.CloudProviderValues;
    readonly CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: "alibaba_cloud_ecs";
    readonly CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: "alibaba_cloud_fc";
    readonly CLOUDPLATFORMVALUES_AWS_EC2: "aws_ec2";
    readonly CLOUDPLATFORMVALUES_AWS_ECS: "aws_ecs";
    readonly CLOUDPLATFORMVALUES_AWS_EKS: "aws_eks";
    readonly CLOUDPLATFORMVALUES_AWS_LAMBDA: "aws_lambda";
    readonly CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: "aws_elastic_beanstalk";
    readonly CLOUDPLATFORMVALUES_AZURE_VM: "azure_vm";
    readonly CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: "azure_container_instances";
    readonly CLOUDPLATFORMVALUES_AZURE_AKS: "azure_aks";
    readonly CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: "azure_functions";
    readonly CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: "azure_app_service";
    readonly CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: "gcp_compute_engine";
    readonly CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: "gcp_cloud_run";
    readonly CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: "gcp_kubernetes_engine";
    readonly CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: "gcp_cloud_functions";
    readonly CLOUDPLATFORMVALUES_GCP_APP_ENGINE: "gcp_app_engine";
    readonly CloudPlatformValues: semanticConventions.CloudPlatformValues;
    readonly AWSECSLAUNCHTYPEVALUES_EC2: "ec2";
    readonly AWSECSLAUNCHTYPEVALUES_FARGATE: "fargate";
    readonly AwsEcsLaunchtypeValues: semanticConventions.AwsEcsLaunchtypeValues;
    readonly HOSTARCHVALUES_AMD64: "amd64";
    readonly HOSTARCHVALUES_ARM32: "arm32";
    readonly HOSTARCHVALUES_ARM64: "arm64";
    readonly HOSTARCHVALUES_IA64: "ia64";
    readonly HOSTARCHVALUES_PPC32: "ppc32";
    readonly HOSTARCHVALUES_PPC64: "ppc64";
    readonly HOSTARCHVALUES_X86: "x86";
    readonly HostArchValues: semanticConventions.HostArchValues;
    readonly OSTYPEVALUES_WINDOWS: "windows";
    readonly OSTYPEVALUES_LINUX: "linux";
    readonly OSTYPEVALUES_DARWIN: "darwin";
    readonly OSTYPEVALUES_FREEBSD: "freebsd";
    readonly OSTYPEVALUES_NETBSD: "netbsd";
    readonly OSTYPEVALUES_OPENBSD: "openbsd";
    readonly OSTYPEVALUES_DRAGONFLYBSD: "dragonflybsd";
    readonly OSTYPEVALUES_HPUX: "hpux";
    readonly OSTYPEVALUES_AIX: "aix";
    readonly OSTYPEVALUES_SOLARIS: "solaris";
    readonly OSTYPEVALUES_Z_OS: "z_os";
    readonly OsTypeValues: semanticConventions.OsTypeValues;
    readonly TELEMETRYSDKLANGUAGEVALUES_CPP: "cpp";
    readonly TELEMETRYSDKLANGUAGEVALUES_DOTNET: "dotnet";
    readonly TELEMETRYSDKLANGUAGEVALUES_ERLANG: "erlang";
    readonly TELEMETRYSDKLANGUAGEVALUES_GO: "go";
    readonly TELEMETRYSDKLANGUAGEVALUES_JAVA: "java";
    readonly TELEMETRYSDKLANGUAGEVALUES_NODEJS: "nodejs";
    readonly TELEMETRYSDKLANGUAGEVALUES_PHP: "php";
    readonly TELEMETRYSDKLANGUAGEVALUES_PYTHON: "python";
    readonly TELEMETRYSDKLANGUAGEVALUES_RUBY: "ruby";
    readonly TELEMETRYSDKLANGUAGEVALUES_WEBJS: "webjs";
    readonly TelemetrySdkLanguageValues: semanticConventions.TelemetrySdkLanguageValues;
    readonly ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT: "aspnetcore.diagnostics.exception.result";
    readonly ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED: "aborted";
    readonly ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED: "handled";
    readonly ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED: "skipped";
    readonly ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED: "unhandled";
    readonly ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE: "aspnetcore.diagnostics.handler.type";
    readonly ATTR_ASPNETCORE_RATE_LIMITING_POLICY: "aspnetcore.rate_limiting.policy";
    readonly ATTR_ASPNETCORE_RATE_LIMITING_RESULT: "aspnetcore.rate_limiting.result";
    readonly ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED: "acquired";
    readonly ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER: "endpoint_limiter";
    readonly ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER: "global_limiter";
    readonly ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED: "request_canceled";
    readonly ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED: "aspnetcore.request.is_unhandled";
    readonly ATTR_ASPNETCORE_ROUTING_IS_FALLBACK: "aspnetcore.routing.is_fallback";
    readonly ATTR_ASPNETCORE_ROUTING_MATCH_STATUS: "aspnetcore.routing.match_status";
    readonly ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE: "failure";
    readonly ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS: "success";
    readonly ATTR_CLIENT_ADDRESS: "client.address";
    readonly ATTR_CLIENT_PORT: "client.port";
    readonly ATTR_CODE_COLUMN_NUMBER: "code.column.number";
    readonly ATTR_CODE_FILE_PATH: "code.file.path";
    readonly ATTR_CODE_FUNCTION_NAME: "code.function.name";
    readonly ATTR_CODE_LINE_NUMBER: "code.line.number";
    readonly ATTR_CODE_STACKTRACE: "code.stacktrace";
    readonly ATTR_DB_COLLECTION_NAME: "db.collection.name";
    readonly ATTR_DB_NAMESPACE: "db.namespace";
    readonly ATTR_DB_OPERATION_BATCH_SIZE: "db.operation.batch.size";
    readonly ATTR_DB_OPERATION_NAME: "db.operation.name";
    readonly ATTR_DB_QUERY_SUMMARY: "db.query.summary";
    readonly ATTR_DB_QUERY_TEXT: "db.query.text";
    readonly ATTR_DB_RESPONSE_STATUS_CODE: "db.response.status_code";
    readonly ATTR_DB_STORED_PROCEDURE_NAME: "db.stored_procedure.name";
    readonly ATTR_DB_SYSTEM_NAME: "db.system.name";
    readonly DB_SYSTEM_NAME_VALUE_MARIADB: "mariadb";
    readonly DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER: "microsoft.sql_server";
    readonly DB_SYSTEM_NAME_VALUE_MYSQL: "mysql";
    readonly DB_SYSTEM_NAME_VALUE_POSTGRESQL: "postgresql";
    readonly ATTR_DOTNET_GC_HEAP_GENERATION: "dotnet.gc.heap.generation";
    readonly DOTNET_GC_HEAP_GENERATION_VALUE_GEN0: "gen0";
    readonly DOTNET_GC_HEAP_GENERATION_VALUE_GEN1: "gen1";
    readonly DOTNET_GC_HEAP_GENERATION_VALUE_GEN2: "gen2";
    readonly DOTNET_GC_HEAP_GENERATION_VALUE_LOH: "loh";
    readonly DOTNET_GC_HEAP_GENERATION_VALUE_POH: "poh";
    readonly ATTR_ERROR_TYPE: "error.type";
    readonly ERROR_TYPE_VALUE_OTHER: "_OTHER";
    readonly ATTR_EXCEPTION_ESCAPED: "exception.escaped";
    readonly ATTR_EXCEPTION_MESSAGE: "exception.message";
    readonly ATTR_EXCEPTION_STACKTRACE: "exception.stacktrace";
    readonly ATTR_EXCEPTION_TYPE: "exception.type";
    readonly ATTR_HTTP_REQUEST_HEADER: (key: string) => string;
    readonly ATTR_HTTP_REQUEST_METHOD: "http.request.method";
    readonly HTTP_REQUEST_METHOD_VALUE_OTHER: "_OTHER";
    readonly HTTP_REQUEST_METHOD_VALUE_CONNECT: "CONNECT";
    readonly HTTP_REQUEST_METHOD_VALUE_DELETE: "DELETE";
    readonly HTTP_REQUEST_METHOD_VALUE_GET: "GET";
    readonly HTTP_REQUEST_METHOD_VALUE_HEAD: "HEAD";
    readonly HTTP_REQUEST_METHOD_VALUE_OPTIONS: "OPTIONS";
    readonly HTTP_REQUEST_METHOD_VALUE_PATCH: "PATCH";
    readonly HTTP_REQUEST_METHOD_VALUE_POST: "POST";
    readonly HTTP_REQUEST_METHOD_VALUE_PUT: "PUT";
    readonly HTTP_REQUEST_METHOD_VALUE_TRACE: "TRACE";
    readonly ATTR_HTTP_REQUEST_METHOD_ORIGINAL: "http.request.method_original";
    readonly ATTR_HTTP_REQUEST_RESEND_COUNT: "http.request.resend_count";
    readonly ATTR_HTTP_RESPONSE_HEADER: (key: string) => string;
    readonly ATTR_HTTP_RESPONSE_STATUS_CODE: "http.response.status_code";
    readonly ATTR_HTTP_ROUTE: "http.route";
    readonly ATTR_JVM_GC_ACTION: "jvm.gc.action";
    readonly ATTR_JVM_GC_NAME: "jvm.gc.name";
    readonly ATTR_JVM_MEMORY_POOL_NAME: "jvm.memory.pool.name";
    readonly ATTR_JVM_MEMORY_TYPE: "jvm.memory.type";
    readonly JVM_MEMORY_TYPE_VALUE_HEAP: "heap";
    readonly JVM_MEMORY_TYPE_VALUE_NON_HEAP: "non_heap";
    readonly ATTR_JVM_THREAD_DAEMON: "jvm.thread.daemon";
    readonly ATTR_JVM_THREAD_STATE: "jvm.thread.state";
    readonly JVM_THREAD_STATE_VALUE_BLOCKED: "blocked";
    readonly JVM_THREAD_STATE_VALUE_NEW: "new";
    readonly JVM_THREAD_STATE_VALUE_RUNNABLE: "runnable";
    readonly JVM_THREAD_STATE_VALUE_TERMINATED: "terminated";
    readonly JVM_THREAD_STATE_VALUE_TIMED_WAITING: "timed_waiting";
    readonly JVM_THREAD_STATE_VALUE_WAITING: "waiting";
    readonly ATTR_NETWORK_LOCAL_ADDRESS: "network.local.address";
    readonly ATTR_NETWORK_LOCAL_PORT: "network.local.port";
    readonly ATTR_NETWORK_PEER_ADDRESS: "network.peer.address";
    readonly ATTR_NETWORK_PEER_PORT: "network.peer.port";
    readonly ATTR_NETWORK_PROTOCOL_NAME: "network.protocol.name";
    readonly ATTR_NETWORK_PROTOCOL_VERSION: "network.protocol.version";
    readonly ATTR_NETWORK_TRANSPORT: "network.transport";
    readonly NETWORK_TRANSPORT_VALUE_PIPE: "pipe";
    readonly NETWORK_TRANSPORT_VALUE_QUIC: "quic";
    readonly NETWORK_TRANSPORT_VALUE_TCP: "tcp";
    readonly NETWORK_TRANSPORT_VALUE_UDP: "udp";
    readonly NETWORK_TRANSPORT_VALUE_UNIX: "unix";
    readonly ATTR_NETWORK_TYPE: "network.type";
    readonly NETWORK_TYPE_VALUE_IPV4: "ipv4";
    readonly NETWORK_TYPE_VALUE_IPV6: "ipv6";
    readonly ATTR_OTEL_SCOPE_NAME: "otel.scope.name";
    readonly ATTR_OTEL_SCOPE_VERSION: "otel.scope.version";
    readonly ATTR_OTEL_STATUS_CODE: "otel.status_code";
    readonly OTEL_STATUS_CODE_VALUE_ERROR: "ERROR";
    readonly OTEL_STATUS_CODE_VALUE_OK: "OK";
    readonly ATTR_OTEL_STATUS_DESCRIPTION: "otel.status_description";
    readonly ATTR_SERVER_ADDRESS: "server.address";
    readonly ATTR_SERVER_PORT: "server.port";
    readonly ATTR_SERVICE_NAME: "service.name";
    readonly ATTR_SERVICE_VERSION: "service.version";
    readonly ATTR_SIGNALR_CONNECTION_STATUS: "signalr.connection.status";
    readonly SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN: "app_shutdown";
    readonly SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE: "normal_closure";
    readonly SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT: "timeout";
    readonly ATTR_SIGNALR_TRANSPORT: "signalr.transport";
    readonly SIGNALR_TRANSPORT_VALUE_LONG_POLLING: "long_polling";
    readonly SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS: "server_sent_events";
    readonly SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS: "web_sockets";
    readonly ATTR_TELEMETRY_SDK_LANGUAGE: "telemetry.sdk.language";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_CPP: "cpp";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET: "dotnet";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG: "erlang";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_GO: "go";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_JAVA: "java";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS: "nodejs";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_PHP: "php";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON: "python";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_RUBY: "ruby";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_RUST: "rust";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT: "swift";
    readonly TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS: "webjs";
    readonly ATTR_TELEMETRY_SDK_NAME: "telemetry.sdk.name";
    readonly ATTR_TELEMETRY_SDK_VERSION: "telemetry.sdk.version";
    readonly ATTR_URL_FRAGMENT: "url.fragment";
    readonly ATTR_URL_FULL: "url.full";
    readonly ATTR_URL_PATH: "url.path";
    readonly ATTR_URL_QUERY: "url.query";
    readonly ATTR_URL_SCHEME: "url.scheme";
    readonly ATTR_USER_AGENT_ORIGINAL: "user_agent.original";
    readonly METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS: "aspnetcore.diagnostics.exceptions";
    readonly METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES: "aspnetcore.rate_limiting.active_request_leases";
    readonly METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS: "aspnetcore.rate_limiting.queued_requests";
    readonly METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE: "aspnetcore.rate_limiting.request.time_in_queue";
    readonly METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION: "aspnetcore.rate_limiting.request_lease.duration";
    readonly METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS: "aspnetcore.rate_limiting.requests";
    readonly METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS: "aspnetcore.routing.match_attempts";
    readonly METRIC_DB_CLIENT_OPERATION_DURATION: "db.client.operation.duration";
    readonly METRIC_DOTNET_ASSEMBLY_COUNT: "dotnet.assembly.count";
    readonly METRIC_DOTNET_EXCEPTIONS: "dotnet.exceptions";
    readonly METRIC_DOTNET_GC_COLLECTIONS: "dotnet.gc.collections";
    readonly METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED: "dotnet.gc.heap.total_allocated";
    readonly METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE: "dotnet.gc.last_collection.heap.fragmentation.size";
    readonly METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE: "dotnet.gc.last_collection.heap.size";
    readonly METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE: "dotnet.gc.last_collection.memory.committed_size";
    readonly METRIC_DOTNET_GC_PAUSE_TIME: "dotnet.gc.pause.time";
    readonly METRIC_DOTNET_JIT_COMPILATION_TIME: "dotnet.jit.compilation.time";
    readonly METRIC_DOTNET_JIT_COMPILED_IL_SIZE: "dotnet.jit.compiled_il.size";
    readonly METRIC_DOTNET_JIT_COMPILED_METHODS: "dotnet.jit.compiled_methods";
    readonly METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS: "dotnet.monitor.lock_contentions";
    readonly METRIC_DOTNET_PROCESS_CPU_COUNT: "dotnet.process.cpu.count";
    readonly METRIC_DOTNET_PROCESS_CPU_TIME: "dotnet.process.cpu.time";
    readonly METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET: "dotnet.process.memory.working_set";
    readonly METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH: "dotnet.thread_pool.queue.length";
    readonly METRIC_DOTNET_THREAD_POOL_THREAD_COUNT: "dotnet.thread_pool.thread.count";
    readonly METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT: "dotnet.thread_pool.work_item.count";
    readonly METRIC_DOTNET_TIMER_COUNT: "dotnet.timer.count";
    readonly METRIC_HTTP_CLIENT_REQUEST_DURATION: "http.client.request.duration";
    readonly METRIC_HTTP_SERVER_REQUEST_DURATION: "http.server.request.duration";
    readonly METRIC_JVM_CLASS_COUNT: "jvm.class.count";
    readonly METRIC_JVM_CLASS_LOADED: "jvm.class.loaded";
    readonly METRIC_JVM_CLASS_UNLOADED: "jvm.class.unloaded";
    readonly METRIC_JVM_CPU_COUNT: "jvm.cpu.count";
    readonly METRIC_JVM_CPU_RECENT_UTILIZATION: "jvm.cpu.recent_utilization";
    readonly METRIC_JVM_CPU_TIME: "jvm.cpu.time";
    readonly METRIC_JVM_GC_DURATION: "jvm.gc.duration";
    readonly METRIC_JVM_MEMORY_COMMITTED: "jvm.memory.committed";
    readonly METRIC_JVM_MEMORY_LIMIT: "jvm.memory.limit";
    readonly METRIC_JVM_MEMORY_USED: "jvm.memory.used";
    readonly METRIC_JVM_MEMORY_USED_AFTER_LAST_GC: "jvm.memory.used_after_last_gc";
    readonly METRIC_JVM_THREAD_COUNT: "jvm.thread.count";
    readonly METRIC_KESTREL_ACTIVE_CONNECTIONS: "kestrel.active_connections";
    readonly METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES: "kestrel.active_tls_handshakes";
    readonly METRIC_KESTREL_CONNECTION_DURATION: "kestrel.connection.duration";
    readonly METRIC_KESTREL_QUEUED_CONNECTIONS: "kestrel.queued_connections";
    readonly METRIC_KESTREL_QUEUED_REQUESTS: "kestrel.queued_requests";
    readonly METRIC_KESTREL_REJECTED_CONNECTIONS: "kestrel.rejected_connections";
    readonly METRIC_KESTREL_TLS_HANDSHAKE_DURATION: "kestrel.tls_handshake.duration";
    readonly METRIC_KESTREL_UPGRADED_CONNECTIONS: "kestrel.upgraded_connections";
    readonly METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS: "signalr.server.active_connections";
    readonly METRIC_SIGNALR_SERVER_CONNECTION_DURATION: "signalr.server.connection.duration";
    readonly ATTR_BTRZ_ACCOUNT_ID: "btrz.account.id";
};
export declare function initializeTracing(options: TracingInitOptions): {
    shutdownTracing: () => Promise<void>;
};
type TraceableFunction<T extends unknown[], R> = (...args: T) => R;
type TraceableFunctionWithoutArgs<R> = () => R;
type TraceOptions = SpanOptions & {
    inheritAttributesFromParentTrace?: boolean;
};
export declare function trace<R>(fn: TraceableFunctionWithoutArgs<R>): R;
export declare function trace<R>(spanName: string, fn: TraceableFunctionWithoutArgs<R>): R;
export declare function trace<R>(options: TraceOptions, fn: TraceableFunctionWithoutArgs<R>): R;
export declare function trace<R>(spanName: string, options: TraceOptions, fn: TraceableFunctionWithoutArgs<R>): R;
export declare function withTracing<T extends unknown[], R>(fn: TraceableFunction<T, R>): TraceableFunction<T, R>;
export declare function withTracing<T extends unknown[], R>(spanName: string, fn: TraceableFunction<T, R>): TraceableFunction<T, R>;
export declare function withTracing<T extends unknown[], R>(options: TraceOptions, fn: TraceableFunction<T, R>): TraceableFunction<T, R>;
export declare function withTracing<T extends unknown[], R>(spanName: string, options: TraceOptions, fn: TraceableFunction<T, R>): TraceableFunction<T, R>;
/**
 * Warming-up the database connection is done to improve the legibility of traces. The first connection to the database will initiate a
 * polling process between the mongodb driver and the Mongo server. If the connection is not warmed up on server start, the first API which
 * uses the database will initiate the connection.  The trace data captured for that API call will also include the polling traffic between
 * the mongodb driver and the Mongo server.  This polling will continue until the server is shut down, and as a result, the trace will last
 * as long as this server is running, and will contain details about the polling traffic between the mongo client and server.  We do not
 * want to capture this polling traffic, and warming-up the database connection outside an API handler will prevent this.
**/
export declare function warmUpDatabaseConnectionForTracing(simpleDao: SimpleDao, logger: BtrzLogger): Promise<void>;
export declare function __enableTestMode(): {
    spanExporter: InMemorySpanExporter;
    spanProcessor: SimpleSpanProcessor;
};
export declare function __getActiveOtlpSdkInstance(): NodeSDK | null;
export {};
